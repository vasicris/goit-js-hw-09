{"mappings":"qhBAEA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAcC,SAASC,cAAc,SACrCC,EAAeF,SAASC,cAAc,uBACtCE,EAAcH,SAASC,cAAc,sBACrCG,EAAgBJ,SAASC,cAAc,wBACvCI,EAAYL,SAASC,cAAc,yBAKzC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAZbT,EAAYiB,iBAAiB,UAgB7B,SAAmBC,GACjBA,EAAMC,gB,IAhBRb,EAAUW,iBAAiB,SAoB3B,SAAyBC,GACvBA,EAAMC,iBAEN,IAAIC,EAAaC,SAASlB,EAAamB,OACnCC,EAAcF,SAAShB,EAAciB,OAEzC,IAAK,IAAIE,EAAI,EAAGA,GAAKD,EAAaC,IAChCjB,EAAciB,EAAGJ,GACdK,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqBpB,QAAiBC,MAAU,IAEzEoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA5B,GAAS6B,OAAOG,QAAQ,sBAAoBtB,QAAeC,MAAU,IAGzEW,GAAcC,SAASjB,EAAYkB,M","sources":["src/js/03-promises.js"],"sourcesContent":["\n\nimport Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\nconst delayElement = document.querySelector('input[name=\"delay\"]');\nconst stepElement = document.querySelector('input[name=\"step\"]');\nconst amountElement = document.querySelector('input[name=\"amount\"]');\nconst submitBtn = document.querySelector('button[type=\"submit\"]');\n\nformElement.addEventListener('submit', getValues);\nsubmitBtn.addEventListener('click', generatePromise);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction getValues(event) {\n  event.preventDefault();\n  // Retrieve form values and perform necessary operations\n}\n\nfunction generatePromise(event) {\n  event.preventDefault();\n\n  let delayValue = parseInt(delayElement.value);\n  let amountValue = parseInt(amountElement.value);\n\n  for (let i = 1; i <= amountValue; i++) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delayValue += parseInt(stepElement.value); // Increment delay for the next promise\n  }\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$delayElement","$47d4ff9957288465$var$stepElement","$47d4ff9957288465$var$amountElement","$47d4ff9957288465$var$submitBtn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayValue","parseInt","value","amountValue","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.5fed9ab1.js.map"}
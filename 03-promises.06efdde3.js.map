{"mappings":"iiBAEA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SACrCC,EAAeF,SAASC,cAAc,uBACtCE,EAAcH,SAASC,cAAc,sBACrCG,EAAgBJ,SAASC,cAAc,wBACvCI,EAAYL,SAASC,cAAc,yBAKzC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAZPT,EAAYiB,iBAAiB,UAgB7B,SAAmBC,GACjBA,EAAMC,gB,IAhBRb,EAAUW,iBAAiB,SAoB3B,SAAyBC,GACvBA,EAAMC,iBAKN,IAHA,IAAIC,EAAaC,SAASlB,EAAamB,OACnCC,EAAcF,SAAShB,EAAciB,OAEhCE,EAAI,EAAGA,GAAKD,EAAaC,IAChCjB,EAAciB,EAAGJ,GACdK,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEvEsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA7B,GAAS8B,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGvEW,GAAcC,SAASjB,EAAYkB,M","sources":["src/js/03-promises.js"],"sourcesContent":["\n\nimport Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\nconst delayElement = document.querySelector('input[name=\"delay\"]');\nconst stepElement = document.querySelector('input[name=\"step\"]');\nconst amountElement = document.querySelector('input[name=\"amount\"]');\nconst submitBtn = document.querySelector('button[type=\"submit\"]');\n\nformElement.addEventListener('submit', getValues);\nsubmitBtn.addEventListener('click', generatePromise);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction getValues(event) {\n  event.preventDefault();\n  // Retrieve form values and perform necessary operations\n}\n\nfunction generatePromise(event) {\n  event.preventDefault();\n\n  let delayValue = parseInt(delayElement.value);\n  let amountValue = parseInt(amountElement.value);\n\n  for (let i = 1; i <= amountValue; i++) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delayValue += parseInt(stepElement.value); // Increment delay for the next promise\n  }\n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$delayElement","$ce04d3a99e08e73b$var$stepElement","$ce04d3a99e08e73b$var$amountElement","$ce04d3a99e08e73b$var$submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayValue","parseInt","value","amountValue","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.06efdde3.js.map"}